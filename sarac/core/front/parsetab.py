
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALNOT_EQUALleftLTLEGTGEleftPLUSMINUSleftTIMESDIVASSIGN CHAR COMMA DIV DO ELSE EQUAL FLOAT FOR GE GT IDENTIFIER IF INT LBRACE LBRACKET LE LPAREN LT MINUS NOT NOT_EQUAL NUMBER PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES WHILEtranslation_unit : external_declaration\n                            | translation_unit external_declarationexternal_declaration : function_definition\n                                | declaration function_definition : type_specifier IDENTIFIER LPAREN parameters RPAREN compound_statementparameters : parameter_list\n                      | \n        parameter_list : parameter_list COMMA type_specifier IDENTIFIER\n                          | type_specifier IDENTIFIER\n        declarations : declarations declaration\n                        |\n        declaration : type_specifier IDENTIFIER SEMICOLONstatements : statements statement\n                      |\n        statement : IF LPAREN expression RPAREN statement\n                     | IF LPAREN expression RPAREN statement ELSE statement\n        statement : WHILE LPAREN expression RPAREN statementstatement : FOR LPAREN expression_statement expression_statement RPAREN statement\n                     | FOR LPAREN expression_statement expression_statement expression RPAREN statementstatement : IDENTIFIER ASSIGN expression SEMICOLONstatement : compound_statementstatement : expression_statementcompound_statement : LBRACE declarations statements RBRACEexpression_statement : SEMICOLON\n                                | expression SEMICOLONexpression : unary_expression\n                      | expression LT expression\n                      | expression LE expression\n                      | expression GT expression\n                      | expression GE expression\n                      | expression PLUS expression\n                      | expression MINUS expression\n                      | expression TIMES expression \n                      | expression DIV expressionunary_expression : primary_expression\n                            | unary_operator unary_expressionprimary_expression : LPAREN expression RPARENprimary_expression : NUMBERprimary_expression : IDENTIFIERunary_operator : NOT\n                          | MINUS\n                          | PLUStype_specifier : CHAR\n                          | INT\n                          | FLOAT'
    
_lr_action_items = {'NUMBER':([11,21,23,24,26,27,31,32,33,34,35,37,38,41,43,46,47,50,52,53,54,55,56,57,58,59,60,61,64,75,76,77,78,79,80,82,83,84,85,86,87,],[-12,-11,-14,29,-10,-22,-41,-24,-21,-42,-13,29,-23,29,-40,29,29,29,29,29,-25,29,29,29,29,29,29,29,29,29,-20,29,29,-17,29,-15,-18,29,29,-19,-16,]),'CHAR':([0,1,2,7,8,10,11,12,17,20,21,23,26,38,],[5,-1,-3,-4,5,-2,-12,5,5,-5,-11,5,-10,-23,]),'WHILE':([11,21,23,24,26,27,32,33,35,38,54,75,76,78,79,80,82,83,84,85,86,87,],[-12,-11,-14,30,-10,-22,-24,-21,-13,-23,-25,30,-20,30,-17,30,-15,-18,30,30,-19,-16,]),'DIV':([28,29,36,40,44,48,49,51,62,63,65,66,67,68,69,70,71,72,73,74,81,],[-26,-38,-39,-35,60,-36,-39,60,60,60,-37,60,60,60,-33,60,60,60,-34,60,60,]),'MINUS':([11,21,23,24,26,27,28,29,31,32,33,34,35,36,37,38,40,41,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,],[-12,-11,-14,31,-10,-22,-26,-38,-41,-24,-21,-42,-13,-39,31,-23,-35,31,-40,61,31,31,-36,-39,31,61,31,31,-25,31,31,31,31,31,31,31,61,61,31,-37,61,61,61,-33,61,61,-31,-34,-32,31,-20,31,31,-17,31,61,-15,-18,31,31,-19,-16,]),'LE':([28,29,36,40,44,48,49,51,62,63,65,66,67,68,69,70,71,72,73,74,81,],[-26,-38,-39,-35,53,-36,-39,53,53,53,-37,53,-28,-30,-33,-27,-29,-31,-34,-32,53,]),'RPAREN':([12,14,15,16,22,28,29,32,40,48,49,51,54,62,65,66,67,68,69,70,71,72,73,74,77,81,],[-7,-6,18,-9,-8,-26,-38,-24,-35,-36,-39,65,-25,75,-37,78,-28,-30,-33,-27,-29,-31,-34,-32,80,84,]),'SEMICOLON':([9,11,21,23,24,26,27,28,29,32,33,35,36,38,40,44,45,48,49,50,54,63,64,65,67,68,69,70,71,72,73,74,75,76,78,79,80,82,83,84,85,86,87,],[11,-12,-11,-14,32,-10,-22,-26,-38,-24,-21,-13,-39,-23,-35,54,11,-36,-39,32,-25,76,32,-37,-28,-30,-33,-27,-29,-31,-34,-32,32,-20,32,-17,32,-15,-18,32,32,-19,-16,]),'LT':([28,29,36,40,44,48,49,51,62,63,65,66,67,68,69,70,71,72,73,74,81,],[-26,-38,-39,-35,57,-36,-39,57,57,57,-37,57,-28,-30,-33,-27,-29,-31,-34,-32,57,]),'PLUS':([11,21,23,24,26,27,28,29,31,32,33,34,35,36,37,38,40,41,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,],[-12,-11,-14,34,-10,-22,-26,-38,-41,-24,-21,-42,-13,-39,34,-23,-35,34,-40,59,34,34,-36,-39,34,59,34,34,-25,34,34,34,34,34,34,34,59,59,34,-37,59,59,59,-33,59,59,-31,-34,-32,34,-20,34,34,-17,34,59,-15,-18,34,34,-19,-16,]),'COMMA':([14,16,22,],[17,-9,-8,]),'IDENTIFIER':([3,4,5,6,11,13,19,21,23,24,25,26,27,31,32,33,34,35,37,38,41,43,46,47,50,52,53,54,55,56,57,58,59,60,61,64,75,76,77,78,79,80,82,83,84,85,86,87,],[-44,-45,-43,9,-12,16,22,-11,-14,36,45,-10,-22,-41,-24,-21,-42,-13,49,-23,49,-40,49,49,49,49,49,-25,49,49,49,49,49,49,49,49,36,-20,49,36,-17,36,-15,-18,36,36,-19,-16,]),'ASSIGN':([36,],[47,]),'$end':([1,2,7,8,10,11,20,38,],[-1,-3,-4,0,-2,-12,-5,-23,]),'GT':([28,29,36,40,44,48,49,51,62,63,65,66,67,68,69,70,71,72,73,74,81,],[-26,-38,-39,-35,58,-36,-39,58,58,58,-37,58,-28,-30,-33,-27,-29,-31,-34,-32,58,]),'RBRACE':([11,21,23,24,26,27,32,33,35,38,54,76,79,82,83,86,87,],[-12,-11,-14,38,-10,-22,-24,-21,-13,-23,-25,-20,-17,-15,-18,-19,-16,]),'FOR':([11,21,23,24,26,27,32,33,35,38,54,75,76,78,79,80,82,83,84,85,86,87,],[-12,-11,-14,39,-10,-22,-24,-21,-13,-23,-25,39,-20,39,-17,39,-15,-18,39,39,-19,-16,]),'TIMES':([28,29,36,40,44,48,49,51,62,63,65,66,67,68,69,70,71,72,73,74,81,],[-26,-38,-39,-35,56,-36,-39,56,56,56,-37,56,56,56,-33,56,56,56,-34,56,56,]),'GE':([28,29,36,40,44,48,49,51,62,63,65,66,67,68,69,70,71,72,73,74,81,],[-26,-38,-39,-35,55,-36,-39,55,55,55,-37,55,-28,-30,-33,-27,-29,-31,-34,-32,55,]),'LPAREN':([9,11,21,23,24,26,27,30,31,32,33,34,35,37,38,39,41,42,43,46,47,50,52,53,54,55,56,57,58,59,60,61,64,75,76,77,78,79,80,82,83,84,85,86,87,],[12,-12,-11,-14,41,-10,-22,46,-41,-24,-21,-42,-13,41,-23,50,41,52,-40,41,41,41,41,41,-25,41,41,41,41,41,41,41,41,41,-20,41,41,-17,41,-15,-18,41,41,-19,-16,]),'ELSE':([27,32,33,38,54,76,79,82,83,86,87,],[-22,-24,-21,-23,-25,-20,-17,85,-18,-19,-16,]),'IF':([11,21,23,24,26,27,32,33,35,38,54,75,76,78,79,80,82,83,84,85,86,87,],[-12,-11,-14,42,-10,-22,-24,-21,-13,-23,-25,42,-20,42,-17,42,-15,-18,42,42,-19,-16,]),'LBRACE':([11,18,21,23,24,26,27,32,33,35,38,54,75,76,78,79,80,82,83,84,85,86,87,],[-12,21,-11,-14,21,-10,-22,-24,-21,-13,-23,-25,21,-20,21,-17,21,-15,-18,21,21,-19,-16,]),'INT':([0,1,2,7,8,10,11,12,17,20,21,23,26,38,],[3,-1,-3,-4,3,-2,-12,3,3,-5,-11,3,-10,-23,]),'FLOAT':([0,1,2,7,8,10,11,12,17,20,21,23,26,38,],[4,-1,-3,-4,4,-2,-12,4,4,-5,-11,4,-10,-23,]),'NOT':([11,21,23,24,26,27,31,32,33,34,35,37,38,41,43,46,47,50,52,53,54,55,56,57,58,59,60,61,64,75,76,77,78,79,80,82,83,84,85,86,87,],[-12,-11,-14,43,-10,-22,-41,-24,-21,-42,-13,43,-23,43,-40,43,43,43,43,43,-25,43,43,43,43,43,43,43,43,43,-20,43,43,-17,43,-15,-18,43,43,-19,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'external_declaration':([0,8,],[1,10,]),'expression_statement':([24,50,64,75,78,80,84,85,],[27,64,77,27,27,27,27,27,]),'function_definition':([0,8,],[2,2,]),'statements':([23,],[24,]),'parameter_list':([12,],[14,]),'parameters':([12,],[15,]),'compound_statement':([18,24,75,78,80,84,85,],[20,33,33,33,33,33,33,]),'declarations':([21,],[23,]),'unary_expression':([24,37,41,46,47,50,52,53,55,56,57,58,59,60,61,64,75,77,78,80,84,85,],[28,48,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'type_specifier':([0,8,12,17,23,],[6,6,13,19,25,]),'primary_expression':([24,37,41,46,47,50,52,53,55,56,57,58,59,60,61,64,75,77,78,80,84,85,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'statement':([24,75,78,80,84,85,],[35,79,82,83,86,87,]),'declaration':([0,8,23,],[7,7,26,]),'unary_operator':([24,37,41,46,47,50,52,53,55,56,57,58,59,60,61,64,75,77,78,80,84,85,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'expression':([24,41,46,47,50,52,53,55,56,57,58,59,60,61,64,75,77,78,80,84,85,],[44,51,62,63,44,66,67,68,69,70,71,72,73,74,44,44,81,44,44,44,44,]),'translation_unit':([0,],[8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','parser.py',29),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','parser.py',30),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','parser.py',38),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','parser.py',39),
  ('function_definition -> type_specifier IDENTIFIER LPAREN parameters RPAREN compound_statement','function_definition',6,'p_function_definition','parser.py',43),
  ('parameters -> parameter_list','parameters',1,'p_parameters','parser.py',50),
  ('parameters -> <empty>','parameters',0,'p_parameters','parser.py',51),
  ('parameter_list -> parameter_list COMMA type_specifier IDENTIFIER','parameter_list',4,'p_parameter_list','parser.py',59),
  ('parameter_list -> type_specifier IDENTIFIER','parameter_list',2,'p_parameter_list','parser.py',60),
  ('declarations -> declarations declaration','declarations',2,'p_declaration_list','parser.py',78),
  ('declarations -> <empty>','declarations',0,'p_declaration_list','parser.py',79),
  ('declaration -> type_specifier IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',88),
  ('statements -> statements statement','statements',2,'p_statement_list','parser.py',95),
  ('statements -> <empty>','statements',0,'p_statement_list','parser.py',96),
  ('statement -> IF LPAREN expression RPAREN statement','statement',5,'p_control_if','parser.py',105),
  ('statement -> IF LPAREN expression RPAREN statement ELSE statement','statement',7,'p_control_if','parser.py',106),
  ('statement -> WHILE LPAREN expression RPAREN statement','statement',5,'p_while_loop','parser.py',114),
  ('statement -> FOR LPAREN expression_statement expression_statement RPAREN statement','statement',6,'p_for_loop','parser.py',118),
  ('statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement','statement',7,'p_for_loop','parser.py',119),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_assignment','parser.py',127),
  ('statement -> compound_statement','statement',1,'p_compound_statement','parser.py',134),
  ('statement -> expression_statement','statement',1,'p_expression_statement','parser.py',138),
  ('compound_statement -> LBRACE declarations statements RBRACE','compound_statement',4,'p_compound','parser.py',142),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_semi','parser.py',146),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_semi','parser.py',147),
  ('expression -> unary_expression','expression',1,'p_binary_expression','parser.py',154),
  ('expression -> expression LT expression','expression',3,'p_binary_expression','parser.py',155),
  ('expression -> expression LE expression','expression',3,'p_binary_expression','parser.py',156),
  ('expression -> expression GT expression','expression',3,'p_binary_expression','parser.py',157),
  ('expression -> expression GE expression','expression',3,'p_binary_expression','parser.py',158),
  ('expression -> expression PLUS expression','expression',3,'p_binary_expression','parser.py',159),
  ('expression -> expression MINUS expression','expression',3,'p_binary_expression','parser.py',160),
  ('expression -> expression TIMES expression','expression',3,'p_binary_expression','parser.py',161),
  ('expression -> expression DIV expression','expression',3,'p_binary_expression','parser.py',162),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','parser.py',171),
  ('unary_expression -> unary_operator unary_expression','unary_expression',2,'p_unary_expression','parser.py',172),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_expression_paren','parser.py',179),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression_number','parser.py',183),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression_ref','parser.py',190),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',196),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',197),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',198),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',202),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',203),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',204),
]
